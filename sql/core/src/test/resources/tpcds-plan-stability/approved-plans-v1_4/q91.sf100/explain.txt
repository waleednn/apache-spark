== Physical Plan ==
* Sort (46)
+- Exchange (45)
   +- * HashAggregate (44)
      +- Exchange (43)
         +- * HashAggregate (42)
            +- * Project (41)
               +- * BroadcastHashJoin Inner BuildRight (40)
                  :- * Project (35)
                  :  +- * SortMergeJoin Inner (34)
                  :     :- * Sort (25)
                  :     :  +- Exchange (24)
                  :     :     +- * Project (23)
                  :     :        +- * BroadcastHashJoin Inner BuildRight (22)
                  :     :           :- * Project (17)
                  :     :           :  +- * BroadcastHashJoin Inner BuildRight (16)
                  :     :           :     :- * Project (10)
                  :     :           :     :  +- * BroadcastHashJoin Inner BuildRight (9)
                  :     :           :     :     :- * Filter (3)
                  :     :           :     :     :  +- * ColumnarToRow (2)
                  :     :           :     :     :     +- Scan parquet spark_catalog.default.customer (1)
                  :     :           :     :     +- BroadcastExchange (8)
                  :     :           :     :        +- * Project (7)
                  :     :           :     :           +- * Filter (6)
                  :     :           :     :              +- * ColumnarToRow (5)
                  :     :           :     :                 +- Scan parquet spark_catalog.default.customer_address (4)
                  :     :           :     +- BroadcastExchange (15)
                  :     :           :        +- * Project (14)
                  :     :           :           +- * Filter (13)
                  :     :           :              +- * ColumnarToRow (12)
                  :     :           :                 +- Scan parquet spark_catalog.default.household_demographics (11)
                  :     :           +- BroadcastExchange (21)
                  :     :              +- * Filter (20)
                  :     :                 +- * ColumnarToRow (19)
                  :     :                    +- Scan parquet spark_catalog.default.customer_demographics (18)
                  :     +- * Sort (33)
                  :        +- Exchange (32)
                  :           +- * Project (31)
                  :              +- * BroadcastHashJoin Inner BuildRight (30)
                  :                 :- * Filter (28)
                  :                 :  +- * ColumnarToRow (27)
                  :                 :     +- Scan parquet spark_catalog.default.catalog_returns (26)
                  :                 +- ReusedExchange (29)
                  +- BroadcastExchange (39)
                     +- * Filter (38)
                        +- * ColumnarToRow (37)
                           +- Scan parquet spark_catalog.default.call_center (36)


(1) Scan parquet spark_catalog.default.customer
Output [4]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_hdemo_sk#3, c_current_addr_sk#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_hdemo_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_hdemo_sk:int,c_current_addr_sk:int>

(2) ColumnarToRow [codegen id : 4]
Input [4]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_hdemo_sk#3, c_current_addr_sk#4]

(3) Filter [codegen id : 4]
Input [4]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_hdemo_sk#3, c_current_addr_sk#4]
Condition : (((isnotnull(c_customer_sk#1) AND isnotnull(c_current_addr_sk#4)) AND isnotnull(c_current_cdemo_sk#2)) AND isnotnull(c_current_hdemo_sk#3))

(4) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#5, ca_gmt_offset#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_gmt_offset), EqualTo(ca_gmt_offset,-7.00), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_gmt_offset:decimal(5,2)>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [ca_address_sk#5, ca_gmt_offset#6]

(6) Filter [codegen id : 1]
Input [2]: [ca_address_sk#5, ca_gmt_offset#6]
Condition : ((isnotnull(ca_gmt_offset#6) AND (ca_gmt_offset#6 = -7.00)) AND isnotnull(ca_address_sk#5))

(7) Project [codegen id : 1]
Output [1]: [ca_address_sk#5]
Input [2]: [ca_address_sk#5, ca_gmt_offset#6]

(8) BroadcastExchange
Input [1]: [ca_address_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(9) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [c_current_addr_sk#4]
Right keys [1]: [ca_address_sk#5]
Join type: Inner
Join condition: None

(10) Project [codegen id : 4]
Output [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_hdemo_sk#3]
Input [5]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_hdemo_sk#3, c_current_addr_sk#4, ca_address_sk#5]

(11) Scan parquet spark_catalog.default.household_demographics
Output [2]: [hd_demo_sk#7, hd_buy_potential#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [IsNotNull(hd_buy_potential), StringStartsWith(hd_buy_potential,Unknown), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_buy_potential:string>

(12) ColumnarToRow [codegen id : 2]
Input [2]: [hd_demo_sk#7, hd_buy_potential#8]

(13) Filter [codegen id : 2]
Input [2]: [hd_demo_sk#7, hd_buy_potential#8]
Condition : ((isnotnull(hd_buy_potential#8) AND StartsWith(hd_buy_potential#8, Unknown)) AND isnotnull(hd_demo_sk#7))

(14) Project [codegen id : 2]
Output [1]: [hd_demo_sk#7]
Input [2]: [hd_demo_sk#7, hd_buy_potential#8]

(15) BroadcastExchange
Input [1]: [hd_demo_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(16) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [c_current_hdemo_sk#3]
Right keys [1]: [hd_demo_sk#7]
Join type: Inner
Join condition: None

(17) Project [codegen id : 4]
Output [2]: [c_customer_sk#1, c_current_cdemo_sk#2]
Input [4]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_hdemo_sk#3, hd_demo_sk#7]

(18) Scan parquet spark_catalog.default.customer_demographics
Output [3]: [cd_demo_sk#9, cd_marital_status#10, cd_education_status#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [Or(And(EqualTo(cd_marital_status,M),EqualTo(cd_education_status,Unknown             )),And(EqualTo(cd_marital_status,W),EqualTo(cd_education_status,Advanced Degree     ))), IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>

(19) ColumnarToRow [codegen id : 3]
Input [3]: [cd_demo_sk#9, cd_marital_status#10, cd_education_status#11]

(20) Filter [codegen id : 3]
Input [3]: [cd_demo_sk#9, cd_marital_status#10, cd_education_status#11]
Condition : ((((cd_marital_status#10 = M) AND (cd_education_status#11 = Unknown             )) OR ((cd_marital_status#10 = W) AND (cd_education_status#11 = Advanced Degree     ))) AND isnotnull(cd_demo_sk#9))

(21) BroadcastExchange
Input [3]: [cd_demo_sk#9, cd_marital_status#10, cd_education_status#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(22) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [c_current_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#9]
Join type: Inner
Join condition: None

(23) Project [codegen id : 4]
Output [3]: [c_customer_sk#1, cd_marital_status#10, cd_education_status#11]
Input [5]: [c_customer_sk#1, c_current_cdemo_sk#2, cd_demo_sk#9, cd_marital_status#10, cd_education_status#11]

(24) Exchange
Input [3]: [c_customer_sk#1, cd_marital_status#10, cd_education_status#11]
Arguments: hashpartitioning(c_customer_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(25) Sort [codegen id : 5]
Input [3]: [c_customer_sk#1, cd_marital_status#10, cd_education_status#11]
Arguments: [c_customer_sk#1 ASC NULLS FIRST], false, 0

(26) Scan parquet spark_catalog.default.catalog_returns
Output [4]: [cr_returning_customer_sk#12, cr_call_center_sk#13, cr_net_loss#14, cr_returned_date_sk#15]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#15), dynamicpruningexpression(cr_returned_date_sk#15 IN dynamicpruning#16)]
PushedFilters: [IsNotNull(cr_call_center_sk), IsNotNull(cr_returning_customer_sk)]
ReadSchema: struct<cr_returning_customer_sk:int,cr_call_center_sk:int,cr_net_loss:decimal(7,2)>

(27) ColumnarToRow [codegen id : 7]
Input [4]: [cr_returning_customer_sk#12, cr_call_center_sk#13, cr_net_loss#14, cr_returned_date_sk#15]

(28) Filter [codegen id : 7]
Input [4]: [cr_returning_customer_sk#12, cr_call_center_sk#13, cr_net_loss#14, cr_returned_date_sk#15]
Condition : (isnotnull(cr_call_center_sk#13) AND isnotnull(cr_returning_customer_sk#12))

(29) ReusedExchange [Reuses operator id: 51]
Output [1]: [d_date_sk#17]

(30) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [cr_returned_date_sk#15]
Right keys [1]: [d_date_sk#17]
Join type: Inner
Join condition: None

(31) Project [codegen id : 7]
Output [3]: [cr_returning_customer_sk#12, cr_call_center_sk#13, cr_net_loss#14]
Input [5]: [cr_returning_customer_sk#12, cr_call_center_sk#13, cr_net_loss#14, cr_returned_date_sk#15, d_date_sk#17]

(32) Exchange
Input [3]: [cr_returning_customer_sk#12, cr_call_center_sk#13, cr_net_loss#14]
Arguments: hashpartitioning(cr_returning_customer_sk#12, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(33) Sort [codegen id : 8]
Input [3]: [cr_returning_customer_sk#12, cr_call_center_sk#13, cr_net_loss#14]
Arguments: [cr_returning_customer_sk#12 ASC NULLS FIRST], false, 0

(34) SortMergeJoin [codegen id : 10]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [cr_returning_customer_sk#12]
Join type: Inner
Join condition: None

(35) Project [codegen id : 10]
Output [4]: [cd_marital_status#10, cd_education_status#11, cr_call_center_sk#13, cr_net_loss#14]
Input [6]: [c_customer_sk#1, cd_marital_status#10, cd_education_status#11, cr_returning_customer_sk#12, cr_call_center_sk#13, cr_net_loss#14]

(36) Scan parquet spark_catalog.default.call_center
Output [4]: [cc_call_center_sk#18, cc_call_center_id#19, cc_name#20, cc_manager#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/call_center]
PushedFilters: [IsNotNull(cc_call_center_sk)]
ReadSchema: struct<cc_call_center_sk:int,cc_call_center_id:string,cc_name:string,cc_manager:string>

(37) ColumnarToRow [codegen id : 9]
Input [4]: [cc_call_center_sk#18, cc_call_center_id#19, cc_name#20, cc_manager#21]

(38) Filter [codegen id : 9]
Input [4]: [cc_call_center_sk#18, cc_call_center_id#19, cc_name#20, cc_manager#21]
Condition : isnotnull(cc_call_center_sk#18)

(39) BroadcastExchange
Input [4]: [cc_call_center_sk#18, cc_call_center_id#19, cc_name#20, cc_manager#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=6]

(40) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cr_call_center_sk#13]
Right keys [1]: [cc_call_center_sk#18]
Join type: Inner
Join condition: None

(41) Project [codegen id : 10]
Output [6]: [cc_call_center_id#19, cc_name#20, cc_manager#21, cr_net_loss#14, cd_marital_status#10, cd_education_status#11]
Input [8]: [cd_marital_status#10, cd_education_status#11, cr_call_center_sk#13, cr_net_loss#14, cc_call_center_sk#18, cc_call_center_id#19, cc_name#20, cc_manager#21]

(42) HashAggregate [codegen id : 10]
Input [6]: [cc_call_center_id#19, cc_name#20, cc_manager#21, cr_net_loss#14, cd_marital_status#10, cd_education_status#11]
Keys [5]: [cc_call_center_id#19, cc_name#20, cc_manager#21, cd_marital_status#10, cd_education_status#11]
Functions [1]: [partial_sum(UnscaledValue(cr_net_loss#14))]
Aggregate Attributes [1]: [sum#22]
Results [6]: [cc_call_center_id#19, cc_name#20, cc_manager#21, cd_marital_status#10, cd_education_status#11, sum#23]

(43) Exchange
Input [6]: [cc_call_center_id#19, cc_name#20, cc_manager#21, cd_marital_status#10, cd_education_status#11, sum#23]
Arguments: hashpartitioning(cc_call_center_id#19, cc_name#20, cc_manager#21, cd_marital_status#10, cd_education_status#11, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(44) HashAggregate [codegen id : 11]
Input [6]: [cc_call_center_id#19, cc_name#20, cc_manager#21, cd_marital_status#10, cd_education_status#11, sum#23]
Keys [5]: [cc_call_center_id#19, cc_name#20, cc_manager#21, cd_marital_status#10, cd_education_status#11]
Functions [1]: [sum(UnscaledValue(cr_net_loss#14))]
Aggregate Attributes [1]: [sum(UnscaledValue(cr_net_loss#14))#24]
Results [4]: [cc_call_center_id#19 AS Call_Center#25, cc_name#20 AS Call_Center_Name#26, cc_manager#21 AS Manager#27, MakeDecimal(sum(UnscaledValue(cr_net_loss#14))#24,17,2) AS Returns_Loss#28]

(45) Exchange
Input [4]: [Call_Center#25, Call_Center_Name#26, Manager#27, Returns_Loss#28]
Arguments: rangepartitioning(Returns_Loss#28 DESC NULLS LAST, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(46) Sort [codegen id : 12]
Input [4]: [Call_Center#25, Call_Center_Name#26, Manager#27, Returns_Loss#28]
Arguments: [Returns_Loss#28 DESC NULLS LAST], true, 0

===== Subqueries =====

Subquery:1 Hosting operator id = 26 Hosting Expression = cr_returned_date_sk#15 IN dynamicpruning#16
BroadcastExchange (51)
+- * Project (50)
   +- * Filter (49)
      +- * ColumnarToRow (48)
         +- Scan parquet spark_catalog.default.date_dim (47)


(47) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#17, d_year#29, d_moy#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(48) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#17, d_year#29, d_moy#30]

(49) Filter [codegen id : 1]
Input [3]: [d_date_sk#17, d_year#29, d_moy#30]
Condition : ((((isnotnull(d_year#29) AND isnotnull(d_moy#30)) AND (d_year#29 = 1998)) AND (d_moy#30 = 11)) AND isnotnull(d_date_sk#17))

(50) Project [codegen id : 1]
Output [1]: [d_date_sk#17]
Input [3]: [d_date_sk#17, d_year#29, d_moy#30]

(51) BroadcastExchange
Input [1]: [d_date_sk#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]


