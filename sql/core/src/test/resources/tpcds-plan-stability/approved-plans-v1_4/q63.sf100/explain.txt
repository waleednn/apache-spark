== Physical Plan ==
TakeOrderedAndProject (28)
+- * Project (27)
   +- * Filter (26)
      +- Window (25)
         +- * Sort (24)
            +- Exchange (23)
               +- * HashAggregate (22)
                  +- Exchange (21)
                     +- * HashAggregate (20)
                        +- * Project (19)
                           +- * BroadcastHashJoin Inner BuildRight (18)
                              :- * Project (13)
                              :  +- * BroadcastHashJoin Inner BuildRight (12)
                              :     :- * Project (6)
                              :     :  +- * BroadcastHashJoin Inner BuildRight (5)
                              :     :     :- * Filter (3)
                              :     :     :  +- * ColumnarToRow (2)
                              :     :     :     +- Scan parquet spark_catalog.default.store_sales (1)
                              :     :     +- ReusedExchange (4)
                              :     +- BroadcastExchange (11)
                              :        +- * Project (10)
                              :           +- * Filter (9)
                              :              +- * ColumnarToRow (8)
                              :                 +- Scan parquet spark_catalog.default.item (7)
                              +- BroadcastExchange (17)
                                 +- * Filter (16)
                                    +- * ColumnarToRow (15)
                                       +- Scan parquet spark_catalog.default.store (14)


(1) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 4]
Input [4]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 4]
Input [4]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3, ss_sold_date_sk#4]
Condition : (isnotnull(ss_item_sk#1) AND isnotnull(ss_store_sk#2))

(4) ReusedExchange [Reuses operator id: 33]
Output [2]: [d_date_sk#6, d_moy#7]

(5) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join type: Inner
Join condition: None

(6) Project [codegen id : 4]
Output [4]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3, d_moy#7]
Input [6]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3, ss_sold_date_sk#4, d_date_sk#6, d_moy#7]

(7) Scan parquet spark_catalog.default.item
Output [5]: [i_item_sk#8, i_brand#9, i_class#10, i_category#11, i_manager_id#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [Or(And(And(In(i_category, [Books                                             ,Children                                          ,Electronics                                       ]),In(i_class, [personal                                          ,portable                                          ,refernece                                         ,self-help                                         ])),In(i_brand, [exportiunivamalg #13                               ,scholaramalgamalg #14                             ,scholaramalgamalg #15                              ,scholaramalgamalg #13                              ])),And(And(In(i_category, [Men                                               ,Music                                             ,Women                                             ]),In(i_class, [accessories                                       ,classical                                         ,fragrances                                        ,pants                                             ])),In(i_brand, [amalgimporto #16                                   ,edu packscholar #16                                ,exportiimporto #16                                 ,importoamalg #16                                   ]))), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_class:string,i_category:string,i_manager_id:int>

(8) ColumnarToRow [codegen id : 2]
Input [5]: [i_item_sk#8, i_brand#9, i_class#10, i_category#11, i_manager_id#12]

(9) Filter [codegen id : 2]
Input [5]: [i_item_sk#8, i_brand#9, i_class#10, i_category#11, i_manager_id#12]
Condition : ((((i_category#11 IN (Books                                             ,Children                                          ,Electronics                                       ) AND i_class#10 IN (personal                                          ,portable                                          ,refernece                                         ,self-help                                         )) AND i_brand#9 IN (scholaramalgamalg #14                             ,scholaramalgamalg #15                              ,exportiunivamalg #13                               ,scholaramalgamalg #13                              )) OR ((i_category#11 IN (Women                                             ,Music                                             ,Men                                               ) AND i_class#10 IN (accessories                                       ,classical                                         ,fragrances                                        ,pants                                             )) AND i_brand#9 IN (amalgimporto #16                                   ,edu packscholar #16                                ,exportiimporto #16                                 ,importoamalg #16                                   ))) AND isnotnull(i_item_sk#8))

(10) Project [codegen id : 2]
Output [2]: [i_item_sk#8, i_manager_id#12]
Input [5]: [i_item_sk#8, i_brand#9, i_class#10, i_category#11, i_manager_id#12]

(11) BroadcastExchange
Input [2]: [i_item_sk#8, i_manager_id#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(12) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#8]
Join type: Inner
Join condition: None

(13) Project [codegen id : 4]
Output [4]: [ss_store_sk#2, ss_sales_price#3, d_moy#7, i_manager_id#12]
Input [6]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3, d_moy#7, i_item_sk#8, i_manager_id#12]

(14) Scan parquet spark_catalog.default.store
Output [1]: [s_store_sk#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int>

(15) ColumnarToRow [codegen id : 3]
Input [1]: [s_store_sk#17]

(16) Filter [codegen id : 3]
Input [1]: [s_store_sk#17]
Condition : isnotnull(s_store_sk#17)

(17) BroadcastExchange
Input [1]: [s_store_sk#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=2]

(18) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#17]
Join type: Inner
Join condition: None

(19) Project [codegen id : 4]
Output [3]: [i_manager_id#12, ss_sales_price#3, d_moy#7]
Input [5]: [ss_store_sk#2, ss_sales_price#3, d_moy#7, i_manager_id#12, s_store_sk#17]

(20) HashAggregate [codegen id : 4]
Input [3]: [i_manager_id#12, ss_sales_price#3, d_moy#7]
Keys [2]: [i_manager_id#12, d_moy#7]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#3))]
Aggregate Attributes [1]: [sum#18]
Results [3]: [i_manager_id#12, d_moy#7, sum#19]

(21) Exchange
Input [3]: [i_manager_id#12, d_moy#7, sum#19]
Arguments: hashpartitioning(i_manager_id#12, d_moy#7, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(22) HashAggregate [codegen id : 5]
Input [3]: [i_manager_id#12, d_moy#7, sum#19]
Keys [2]: [i_manager_id#12, d_moy#7]
Functions [1]: [sum(UnscaledValue(ss_sales_price#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#3))#20]
Results [3]: [i_manager_id#12, MakeDecimal(sum(UnscaledValue(ss_sales_price#3))#20,17,2) AS sum_sales#21, MakeDecimal(sum(UnscaledValue(ss_sales_price#3))#20,17,2) AS _w0#22]

(23) Exchange
Input [3]: [i_manager_id#12, sum_sales#21, _w0#22]
Arguments: hashpartitioning(i_manager_id#12, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(24) Sort [codegen id : 6]
Input [3]: [i_manager_id#12, sum_sales#21, _w0#22]
Arguments: [i_manager_id#12 ASC NULLS FIRST], false, 0

(25) Window
Input [3]: [i_manager_id#12, sum_sales#21, _w0#22]
Arguments: [avg(_w0#22) windowspecdefinition(i_manager_id#12, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#23], [i_manager_id#12]

(26) Filter [codegen id : 7]
Input [4]: [i_manager_id#12, sum_sales#21, _w0#22, avg_monthly_sales#23]
Condition : CASE WHEN (avg_monthly_sales#23 > 0.000000) THEN ((abs((sum_sales#21 - avg_monthly_sales#23)) / avg_monthly_sales#23) > 0.1000000000000000) ELSE false END

(27) Project [codegen id : 7]
Output [3]: [i_manager_id#12, sum_sales#21, avg_monthly_sales#23]
Input [4]: [i_manager_id#12, sum_sales#21, _w0#22, avg_monthly_sales#23]

(28) TakeOrderedAndProject
Input [3]: [i_manager_id#12, sum_sales#21, avg_monthly_sales#23]
Arguments: 100, [i_manager_id#12 ASC NULLS FIRST, avg_monthly_sales#23 ASC NULLS FIRST, sum_sales#21 ASC NULLS FIRST], [i_manager_id#12, sum_sales#21, avg_monthly_sales#23]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (33)
+- * Project (32)
   +- * Filter (31)
      +- * ColumnarToRow (30)
         +- Scan parquet spark_catalog.default.date_dim (29)


(29) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#6, d_month_seq#24, d_moy#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_month_seq, [1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int,d_moy:int>

(30) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#6, d_month_seq#24, d_moy#7]

(31) Filter [codegen id : 1]
Input [3]: [d_date_sk#6, d_month_seq#24, d_moy#7]
Condition : (d_month_seq#24 INSET 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211 AND isnotnull(d_date_sk#6))

(32) Project [codegen id : 1]
Output [2]: [d_date_sk#6, d_moy#7]
Input [3]: [d_date_sk#6, d_month_seq#24, d_moy#7]

(33) BroadcastExchange
Input [2]: [d_date_sk#6, d_moy#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]


