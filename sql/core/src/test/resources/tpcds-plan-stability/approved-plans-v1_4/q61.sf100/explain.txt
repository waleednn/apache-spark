== Physical Plan ==
* Project (70)
+- * BroadcastNestedLoopJoin Inner BuildRight (69)
   :- * HashAggregate (46)
   :  +- Exchange (45)
   :     +- * HashAggregate (44)
   :        +- * Project (43)
   :           +- * SortMergeJoin Inner (42)
   :              :- * Sort (29)
   :              :  +- Exchange (28)
   :              :     +- * Project (27)
   :              :        +- * BroadcastHashJoin Inner BuildRight (26)
   :              :           :- * Project (20)
   :              :           :  +- * BroadcastHashJoin Inner BuildRight (19)
   :              :           :     :- * Project (13)
   :              :           :     :  +- * BroadcastHashJoin Inner BuildRight (12)
   :              :           :     :     :- * Project (10)
   :              :           :     :     :  +- * BroadcastHashJoin Inner BuildRight (9)
   :              :           :     :     :     :- * Filter (3)
   :              :           :     :     :     :  +- * ColumnarToRow (2)
   :              :           :     :     :     :     +- Scan parquet spark_catalog.default.store_sales (1)
   :              :           :     :     :     +- BroadcastExchange (8)
   :              :           :     :     :        +- * Project (7)
   :              :           :     :     :           +- * Filter (6)
   :              :           :     :     :              +- * ColumnarToRow (5)
   :              :           :     :     :                 +- Scan parquet spark_catalog.default.item (4)
   :              :           :     :     +- ReusedExchange (11)
   :              :           :     +- BroadcastExchange (18)
   :              :           :        +- * Project (17)
   :              :           :           +- * Filter (16)
   :              :           :              +- * ColumnarToRow (15)
   :              :           :                 +- Scan parquet spark_catalog.default.promotion (14)
   :              :           +- BroadcastExchange (25)
   :              :              +- * Project (24)
   :              :                 +- * Filter (23)
   :              :                    +- * ColumnarToRow (22)
   :              :                       +- Scan parquet spark_catalog.default.store (21)
   :              +- * Sort (41)
   :                 +- Exchange (40)
   :                    +- * Project (39)
   :                       +- * BroadcastHashJoin Inner BuildRight (38)
   :                          :- * Filter (32)
   :                          :  +- * ColumnarToRow (31)
   :                          :     +- Scan parquet spark_catalog.default.customer (30)
   :                          +- BroadcastExchange (37)
   :                             +- * Project (36)
   :                                +- * Filter (35)
   :                                   +- * ColumnarToRow (34)
   :                                      +- Scan parquet spark_catalog.default.customer_address (33)
   +- BroadcastExchange (68)
      +- * HashAggregate (67)
         +- Exchange (66)
            +- * HashAggregate (65)
               +- * Project (64)
                  +- * SortMergeJoin Inner (63)
                     :- * Sort (60)
                     :  +- Exchange (59)
                     :     +- * Project (58)
                     :        +- * BroadcastHashJoin Inner BuildRight (57)
                     :           :- * Project (55)
                     :           :  +- * BroadcastHashJoin Inner BuildRight (54)
                     :           :     :- * Project (52)
                     :           :     :  +- * BroadcastHashJoin Inner BuildRight (51)
                     :           :     :     :- * Filter (49)
                     :           :     :     :  +- * ColumnarToRow (48)
                     :           :     :     :     +- Scan parquet spark_catalog.default.store_sales (47)
                     :           :     :     +- ReusedExchange (50)
                     :           :     +- ReusedExchange (53)
                     :           +- ReusedExchange (56)
                     +- * Sort (62)
                        +- ReusedExchange (61)


(1) Scan parquet spark_catalog.default.store_sales
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ext_sales_price#5, ss_sold_date_sk#6]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#6), dynamicpruningexpression(ss_sold_date_sk#6 IN dynamicpruning#7)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_promo_sk), IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 5]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ext_sales_price#5, ss_sold_date_sk#6]

(3) Filter [codegen id : 5]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ext_sales_price#5, ss_sold_date_sk#6]
Condition : (((isnotnull(ss_store_sk#3) AND isnotnull(ss_promo_sk#4)) AND isnotnull(ss_customer_sk#2)) AND isnotnull(ss_item_sk#1))

(4) Scan parquet spark_catalog.default.item
Output [2]: [i_item_sk#8, i_category#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_category), EqualTo(i_category,Jewelry                                           ), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_category:string>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [i_item_sk#8, i_category#9]

(6) Filter [codegen id : 1]
Input [2]: [i_item_sk#8, i_category#9]
Condition : ((isnotnull(i_category#9) AND (i_category#9 = Jewelry                                           )) AND isnotnull(i_item_sk#8))

(7) Project [codegen id : 1]
Output [1]: [i_item_sk#8]
Input [2]: [i_item_sk#8, i_category#9]

(8) BroadcastExchange
Input [1]: [i_item_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(9) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#8]
Join type: Inner
Join condition: None

(10) Project [codegen id : 5]
Output [5]: [ss_customer_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ext_sales_price#5, ss_sold_date_sk#6]
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ext_sales_price#5, ss_sold_date_sk#6, i_item_sk#8]

(11) ReusedExchange [Reuses operator id: 75]
Output [1]: [d_date_sk#10]

(12) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#6]
Right keys [1]: [d_date_sk#10]
Join type: Inner
Join condition: None

(13) Project [codegen id : 5]
Output [4]: [ss_customer_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ext_sales_price#5]
Input [6]: [ss_customer_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ext_sales_price#5, ss_sold_date_sk#6, d_date_sk#10]

(14) Scan parquet spark_catalog.default.promotion
Output [4]: [p_promo_sk#11, p_channel_dmail#12, p_channel_email#13, p_channel_tv#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [Or(Or(EqualTo(p_channel_dmail,Y),EqualTo(p_channel_email,Y)),EqualTo(p_channel_tv,Y)), IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int,p_channel_dmail:string,p_channel_email:string,p_channel_tv:string>

(15) ColumnarToRow [codegen id : 3]
Input [4]: [p_promo_sk#11, p_channel_dmail#12, p_channel_email#13, p_channel_tv#14]

(16) Filter [codegen id : 3]
Input [4]: [p_promo_sk#11, p_channel_dmail#12, p_channel_email#13, p_channel_tv#14]
Condition : ((((p_channel_dmail#12 = Y) OR (p_channel_email#13 = Y)) OR (p_channel_tv#14 = Y)) AND isnotnull(p_promo_sk#11))

(17) Project [codegen id : 3]
Output [1]: [p_promo_sk#11]
Input [4]: [p_promo_sk#11, p_channel_dmail#12, p_channel_email#13, p_channel_tv#14]

(18) BroadcastExchange
Input [1]: [p_promo_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(19) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_promo_sk#4]
Right keys [1]: [p_promo_sk#11]
Join type: Inner
Join condition: None

(20) Project [codegen id : 5]
Output [3]: [ss_customer_sk#2, ss_store_sk#3, ss_ext_sales_price#5]
Input [5]: [ss_customer_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ext_sales_price#5, p_promo_sk#11]

(21) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#15, s_gmt_offset#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_gmt_offset), EqualTo(s_gmt_offset,-5.00), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_gmt_offset:decimal(5,2)>

(22) ColumnarToRow [codegen id : 4]
Input [2]: [s_store_sk#15, s_gmt_offset#16]

(23) Filter [codegen id : 4]
Input [2]: [s_store_sk#15, s_gmt_offset#16]
Condition : ((isnotnull(s_gmt_offset#16) AND (s_gmt_offset#16 = -5.00)) AND isnotnull(s_store_sk#15))

(24) Project [codegen id : 4]
Output [1]: [s_store_sk#15]
Input [2]: [s_store_sk#15, s_gmt_offset#16]

(25) BroadcastExchange
Input [1]: [s_store_sk#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(26) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#15]
Join type: Inner
Join condition: None

(27) Project [codegen id : 5]
Output [2]: [ss_customer_sk#2, ss_ext_sales_price#5]
Input [4]: [ss_customer_sk#2, ss_store_sk#3, ss_ext_sales_price#5, s_store_sk#15]

(28) Exchange
Input [2]: [ss_customer_sk#2, ss_ext_sales_price#5]
Arguments: hashpartitioning(ss_customer_sk#2, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(29) Sort [codegen id : 6]
Input [2]: [ss_customer_sk#2, ss_ext_sales_price#5]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST], false, 0

(30) Scan parquet spark_catalog.default.customer
Output [2]: [c_customer_sk#17, c_current_addr_sk#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(31) ColumnarToRow [codegen id : 8]
Input [2]: [c_customer_sk#17, c_current_addr_sk#18]

(32) Filter [codegen id : 8]
Input [2]: [c_customer_sk#17, c_current_addr_sk#18]
Condition : (isnotnull(c_customer_sk#17) AND isnotnull(c_current_addr_sk#18))

(33) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#19, ca_gmt_offset#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_gmt_offset), EqualTo(ca_gmt_offset,-5.00), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_gmt_offset:decimal(5,2)>

(34) ColumnarToRow [codegen id : 7]
Input [2]: [ca_address_sk#19, ca_gmt_offset#20]

(35) Filter [codegen id : 7]
Input [2]: [ca_address_sk#19, ca_gmt_offset#20]
Condition : ((isnotnull(ca_gmt_offset#20) AND (ca_gmt_offset#20 = -5.00)) AND isnotnull(ca_address_sk#19))

(36) Project [codegen id : 7]
Output [1]: [ca_address_sk#19]
Input [2]: [ca_address_sk#19, ca_gmt_offset#20]

(37) BroadcastExchange
Input [1]: [ca_address_sk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

(38) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [c_current_addr_sk#18]
Right keys [1]: [ca_address_sk#19]
Join type: Inner
Join condition: None

(39) Project [codegen id : 8]
Output [1]: [c_customer_sk#17]
Input [3]: [c_customer_sk#17, c_current_addr_sk#18, ca_address_sk#19]

(40) Exchange
Input [1]: [c_customer_sk#17]
Arguments: hashpartitioning(c_customer_sk#17, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(41) Sort [codegen id : 9]
Input [1]: [c_customer_sk#17]
Arguments: [c_customer_sk#17 ASC NULLS FIRST], false, 0

(42) SortMergeJoin [codegen id : 10]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#17]
Join type: Inner
Join condition: None

(43) Project [codegen id : 10]
Output [1]: [ss_ext_sales_price#5]
Input [3]: [ss_customer_sk#2, ss_ext_sales_price#5, c_customer_sk#17]

(44) HashAggregate [codegen id : 10]
Input [1]: [ss_ext_sales_price#5]
Keys: []
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#5))]
Aggregate Attributes [1]: [sum#21]
Results [1]: [sum#22]

(45) Exchange
Input [1]: [sum#22]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=7]

(46) HashAggregate [codegen id : 21]
Input [1]: [sum#22]
Keys: []
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#5))#23]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#5))#23,17,2) AS promotions#24]

(47) Scan parquet spark_catalog.default.store_sales
Output [5]: [ss_item_sk#25, ss_customer_sk#26, ss_store_sk#27, ss_ext_sales_price#28, ss_sold_date_sk#29]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#29), dynamicpruningexpression(ss_sold_date_sk#29 IN dynamicpruning#7)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2)>

(48) ColumnarToRow [codegen id : 14]
Input [5]: [ss_item_sk#25, ss_customer_sk#26, ss_store_sk#27, ss_ext_sales_price#28, ss_sold_date_sk#29]

(49) Filter [codegen id : 14]
Input [5]: [ss_item_sk#25, ss_customer_sk#26, ss_store_sk#27, ss_ext_sales_price#28, ss_sold_date_sk#29]
Condition : ((isnotnull(ss_store_sk#27) AND isnotnull(ss_customer_sk#26)) AND isnotnull(ss_item_sk#25))

(50) ReusedExchange [Reuses operator id: 8]
Output [1]: [i_item_sk#30]

(51) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ss_item_sk#25]
Right keys [1]: [i_item_sk#30]
Join type: Inner
Join condition: None

(52) Project [codegen id : 14]
Output [4]: [ss_customer_sk#26, ss_store_sk#27, ss_ext_sales_price#28, ss_sold_date_sk#29]
Input [6]: [ss_item_sk#25, ss_customer_sk#26, ss_store_sk#27, ss_ext_sales_price#28, ss_sold_date_sk#29, i_item_sk#30]

(53) ReusedExchange [Reuses operator id: 75]
Output [1]: [d_date_sk#31]

(54) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ss_sold_date_sk#29]
Right keys [1]: [d_date_sk#31]
Join type: Inner
Join condition: None

(55) Project [codegen id : 14]
Output [3]: [ss_customer_sk#26, ss_store_sk#27, ss_ext_sales_price#28]
Input [5]: [ss_customer_sk#26, ss_store_sk#27, ss_ext_sales_price#28, ss_sold_date_sk#29, d_date_sk#31]

(56) ReusedExchange [Reuses operator id: 25]
Output [1]: [s_store_sk#32]

(57) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ss_store_sk#27]
Right keys [1]: [s_store_sk#32]
Join type: Inner
Join condition: None

(58) Project [codegen id : 14]
Output [2]: [ss_customer_sk#26, ss_ext_sales_price#28]
Input [4]: [ss_customer_sk#26, ss_store_sk#27, ss_ext_sales_price#28, s_store_sk#32]

(59) Exchange
Input [2]: [ss_customer_sk#26, ss_ext_sales_price#28]
Arguments: hashpartitioning(ss_customer_sk#26, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(60) Sort [codegen id : 15]
Input [2]: [ss_customer_sk#26, ss_ext_sales_price#28]
Arguments: [ss_customer_sk#26 ASC NULLS FIRST], false, 0

(61) ReusedExchange [Reuses operator id: 40]
Output [1]: [c_customer_sk#33]

(62) Sort [codegen id : 18]
Input [1]: [c_customer_sk#33]
Arguments: [c_customer_sk#33 ASC NULLS FIRST], false, 0

(63) SortMergeJoin [codegen id : 19]
Left keys [1]: [ss_customer_sk#26]
Right keys [1]: [c_customer_sk#33]
Join type: Inner
Join condition: None

(64) Project [codegen id : 19]
Output [1]: [ss_ext_sales_price#28]
Input [3]: [ss_customer_sk#26, ss_ext_sales_price#28, c_customer_sk#33]

(65) HashAggregate [codegen id : 19]
Input [1]: [ss_ext_sales_price#28]
Keys: []
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#28))]
Aggregate Attributes [1]: [sum#34]
Results [1]: [sum#35]

(66) Exchange
Input [1]: [sum#35]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=9]

(67) HashAggregate [codegen id : 20]
Input [1]: [sum#35]
Keys: []
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#28))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#28))#36]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#28))#36,17,2) AS total#37]

(68) BroadcastExchange
Input [1]: [total#37]
Arguments: IdentityBroadcastMode, [plan_id=10]

(69) BroadcastNestedLoopJoin [codegen id : 21]
Join type: Inner
Join condition: None

(70) Project [codegen id : 21]
Output [3]: [promotions#24, total#37, ((cast(promotions#24 as decimal(15,4)) / cast(total#37 as decimal(15,4))) * 100) AS ((CAST(promotions AS DECIMAL(15,4)) / CAST(total AS DECIMAL(15,4))) * 100)#38]
Input [2]: [promotions#24, total#37]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#6 IN dynamicpruning#7
BroadcastExchange (75)
+- * Project (74)
   +- * Filter (73)
      +- * ColumnarToRow (72)
         +- Scan parquet spark_catalog.default.date_dim (71)


(71) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#10, d_year#39, d_moy#40]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(72) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#10, d_year#39, d_moy#40]

(73) Filter [codegen id : 1]
Input [3]: [d_date_sk#10, d_year#39, d_moy#40]
Condition : ((((isnotnull(d_year#39) AND isnotnull(d_moy#40)) AND (d_year#39 = 1998)) AND (d_moy#40 = 11)) AND isnotnull(d_date_sk#10))

(74) Project [codegen id : 1]
Output [1]: [d_date_sk#10]
Input [3]: [d_date_sk#10, d_year#39, d_moy#40]

(75) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=11]

Subquery:2 Hosting operator id = 47 Hosting Expression = ss_sold_date_sk#29 IN dynamicpruning#7


