== Physical Plan ==
TakeOrderedAndProject (81)
+- * HashAggregate (80)
   +- Exchange (79)
      +- * HashAggregate (78)
         +- * Project (77)
            +- * SortMergeJoin LeftOuter (76)
               :- * Sort (69)
               :  +- Exchange (68)
               :     +- * Project (67)
               :        +- * BroadcastHashJoin LeftOuter BuildRight (66)
               :           :- * Project (61)
               :           :  +- * SortMergeJoin Inner (60)
               :           :     :- * Sort (41)
               :           :     :  +- Exchange (40)
               :           :     :     +- * Project (39)
               :           :     :        +- * SortMergeJoin Inner (38)
               :           :     :           :- * Project (26)
               :           :     :           :  +- * SortMergeJoin Inner (25)
               :           :     :           :     :- * Sort (19)
               :           :     :           :     :  +- Exchange (18)
               :           :     :           :     :     +- * Project (17)
               :           :     :           :     :        +- * BroadcastHashJoin Inner BuildRight (16)
               :           :     :           :     :           :- * Project (10)
               :           :     :           :     :           :  +- * BroadcastHashJoin Inner BuildRight (9)
               :           :     :           :     :           :     :- * Filter (3)
               :           :     :           :     :           :     :  +- * ColumnarToRow (2)
               :           :     :           :     :           :     :     +- Scan parquet spark_catalog.default.catalog_sales (1)
               :           :     :           :     :           :     +- BroadcastExchange (8)
               :           :     :           :     :           :        +- * Project (7)
               :           :     :           :     :           :           +- * Filter (6)
               :           :     :           :     :           :              +- * ColumnarToRow (5)
               :           :     :           :     :           :                 +- Scan parquet spark_catalog.default.household_demographics (4)
               :           :     :           :     :           +- BroadcastExchange (15)
               :           :     :           :     :              +- * Project (14)
               :           :     :           :     :                 +- * Filter (13)
               :           :     :           :     :                    +- * ColumnarToRow (12)
               :           :     :           :     :                       +- Scan parquet spark_catalog.default.customer_demographics (11)
               :           :     :           :     +- * Sort (24)
               :           :     :           :        +- Exchange (23)
               :           :     :           :           +- * Filter (22)
               :           :     :           :              +- * ColumnarToRow (21)
               :           :     :           :                 +- Scan parquet spark_catalog.default.item (20)
               :           :     :           +- * Sort (37)
               :           :     :              +- Exchange (36)
               :           :     :                 +- * Project (35)
               :           :     :                    +- * BroadcastHashJoin Inner BuildRight (34)
               :           :     :                       :- * Filter (29)
               :           :     :                       :  +- * ColumnarToRow (28)
               :           :     :                       :     +- Scan parquet spark_catalog.default.inventory (27)
               :           :     :                       +- BroadcastExchange (33)
               :           :     :                          +- * Filter (32)
               :           :     :                             +- * ColumnarToRow (31)
               :           :     :                                +- Scan parquet spark_catalog.default.warehouse (30)
               :           :     +- * Sort (59)
               :           :        +- Exchange (58)
               :           :           +- * Project (57)
               :           :              +- * BroadcastNestedLoopJoin Inner BuildRight (56)
               :           :                 :- * Project (51)
               :           :                 :  +- * BroadcastHashJoin Inner BuildLeft (50)
               :           :                 :     :- BroadcastExchange (46)
               :           :                 :     :  +- * Project (45)
               :           :                 :     :     +- * Filter (44)
               :           :                 :     :        +- * ColumnarToRow (43)
               :           :                 :     :           +- Scan parquet spark_catalog.default.date_dim (42)
               :           :                 :     +- * Filter (49)
               :           :                 :        +- * ColumnarToRow (48)
               :           :                 :           +- Scan parquet spark_catalog.default.date_dim (47)
               :           :                 +- BroadcastExchange (55)
               :           :                    +- * Filter (54)
               :           :                       +- * ColumnarToRow (53)
               :           :                          +- Scan parquet spark_catalog.default.date_dim (52)
               :           +- BroadcastExchange (65)
               :              +- * Filter (64)
               :                 +- * ColumnarToRow (63)
               :                    +- Scan parquet spark_catalog.default.promotion (62)
               +- * Sort (75)
                  +- Exchange (74)
                     +- * Project (73)
                        +- * Filter (72)
                           +- * ColumnarToRow (71)
                              +- Scan parquet spark_catalog.default.catalog_returns (70)


(1) Scan parquet spark_catalog.default.catalog_sales
Output [8]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#8), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(cs_quantity), IsNotNull(cs_item_sk), IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_hdemo_sk), IsNotNull(cs_ship_date_sk)]
ReadSchema: struct<cs_ship_date_sk:int,cs_bill_cdemo_sk:int,cs_bill_hdemo_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:int,cs_quantity:int>

(2) ColumnarToRow [codegen id : 3]
Input [8]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8]

(3) Filter [codegen id : 3]
Input [8]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8]
Condition : ((((isnotnull(cs_quantity#7) AND isnotnull(cs_item_sk#4)) AND isnotnull(cs_bill_cdemo_sk#2)) AND isnotnull(cs_bill_hdemo_sk#3)) AND isnotnull(cs_ship_date_sk#1))

(4) Scan parquet spark_catalog.default.household_demographics
Output [2]: [hd_demo_sk#9, hd_buy_potential#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [IsNotNull(hd_buy_potential), EqualTo(hd_buy_potential,>10000         ), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_buy_potential:string>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [hd_demo_sk#9, hd_buy_potential#10]

(6) Filter [codegen id : 1]
Input [2]: [hd_demo_sk#9, hd_buy_potential#10]
Condition : ((isnotnull(hd_buy_potential#10) AND (hd_buy_potential#10 = >10000         )) AND isnotnull(hd_demo_sk#9))

(7) Project [codegen id : 1]
Output [1]: [hd_demo_sk#9]
Input [2]: [hd_demo_sk#9, hd_buy_potential#10]

(8) BroadcastExchange
Input [1]: [hd_demo_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(9) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_bill_hdemo_sk#3]
Right keys [1]: [hd_demo_sk#9]
Join type: Inner
Join condition: None

(10) Project [codegen id : 3]
Output [7]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8]
Input [9]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8, hd_demo_sk#9]

(11) Scan parquet spark_catalog.default.customer_demographics
Output [2]: [cd_demo_sk#11, cd_marital_status#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_marital_status), EqualTo(cd_marital_status,D), IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string>

(12) ColumnarToRow [codegen id : 2]
Input [2]: [cd_demo_sk#11, cd_marital_status#12]

(13) Filter [codegen id : 2]
Input [2]: [cd_demo_sk#11, cd_marital_status#12]
Condition : ((isnotnull(cd_marital_status#12) AND (cd_marital_status#12 = D)) AND isnotnull(cd_demo_sk#11))

(14) Project [codegen id : 2]
Output [1]: [cd_demo_sk#11]
Input [2]: [cd_demo_sk#11, cd_marital_status#12]

(15) BroadcastExchange
Input [1]: [cd_demo_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(16) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_bill_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#11]
Join type: Inner
Join condition: None

(17) Project [codegen id : 3]
Output [6]: [cs_ship_date_sk#1, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8]
Input [8]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8, cd_demo_sk#11]

(18) Exchange
Input [6]: [cs_ship_date_sk#1, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8]
Arguments: hashpartitioning(cs_item_sk#4, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(19) Sort [codegen id : 4]
Input [6]: [cs_ship_date_sk#1, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8]
Arguments: [cs_item_sk#4 ASC NULLS FIRST], false, 0

(20) Scan parquet spark_catalog.default.item
Output [2]: [i_item_sk#13, i_item_desc#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(21) ColumnarToRow [codegen id : 5]
Input [2]: [i_item_sk#13, i_item_desc#14]

(22) Filter [codegen id : 5]
Input [2]: [i_item_sk#13, i_item_desc#14]
Condition : isnotnull(i_item_sk#13)

(23) Exchange
Input [2]: [i_item_sk#13, i_item_desc#14]
Arguments: hashpartitioning(i_item_sk#13, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(24) Sort [codegen id : 6]
Input [2]: [i_item_sk#13, i_item_desc#14]
Arguments: [i_item_sk#13 ASC NULLS FIRST], false, 0

(25) SortMergeJoin [codegen id : 7]
Left keys [1]: [cs_item_sk#4]
Right keys [1]: [i_item_sk#13]
Join type: Inner
Join condition: None

(26) Project [codegen id : 7]
Output [7]: [cs_ship_date_sk#1, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8, i_item_desc#14]
Input [8]: [cs_ship_date_sk#1, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8, i_item_sk#13, i_item_desc#14]

(27) Scan parquet spark_catalog.default.inventory
Output [4]: [inv_item_sk#15, inv_warehouse_sk#16, inv_quantity_on_hand#17, inv_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(inv_date_sk#18), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(inv_quantity_on_hand), IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk)]
ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>

(28) ColumnarToRow [codegen id : 9]
Input [4]: [inv_item_sk#15, inv_warehouse_sk#16, inv_quantity_on_hand#17, inv_date_sk#18]

(29) Filter [codegen id : 9]
Input [4]: [inv_item_sk#15, inv_warehouse_sk#16, inv_quantity_on_hand#17, inv_date_sk#18]
Condition : ((isnotnull(inv_quantity_on_hand#17) AND isnotnull(inv_item_sk#15)) AND isnotnull(inv_warehouse_sk#16))

(30) Scan parquet spark_catalog.default.warehouse
Output [2]: [w_warehouse_sk#19, w_warehouse_name#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/warehouse]
PushedFilters: [IsNotNull(w_warehouse_sk)]
ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>

(31) ColumnarToRow [codegen id : 8]
Input [2]: [w_warehouse_sk#19, w_warehouse_name#20]

(32) Filter [codegen id : 8]
Input [2]: [w_warehouse_sk#19, w_warehouse_name#20]
Condition : isnotnull(w_warehouse_sk#19)

(33) BroadcastExchange
Input [2]: [w_warehouse_sk#19, w_warehouse_name#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=5]

(34) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [inv_warehouse_sk#16]
Right keys [1]: [w_warehouse_sk#19]
Join type: Inner
Join condition: None

(35) Project [codegen id : 9]
Output [4]: [inv_item_sk#15, inv_quantity_on_hand#17, inv_date_sk#18, w_warehouse_name#20]
Input [6]: [inv_item_sk#15, inv_warehouse_sk#16, inv_quantity_on_hand#17, inv_date_sk#18, w_warehouse_sk#19, w_warehouse_name#20]

(36) Exchange
Input [4]: [inv_item_sk#15, inv_quantity_on_hand#17, inv_date_sk#18, w_warehouse_name#20]
Arguments: hashpartitioning(inv_item_sk#15, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(37) Sort [codegen id : 10]
Input [4]: [inv_item_sk#15, inv_quantity_on_hand#17, inv_date_sk#18, w_warehouse_name#20]
Arguments: [inv_item_sk#15 ASC NULLS FIRST], false, 0

(38) SortMergeJoin [codegen id : 11]
Left keys [1]: [cs_item_sk#4]
Right keys [1]: [inv_item_sk#15]
Join type: Inner
Join condition: (inv_quantity_on_hand#17 < cs_quantity#7)

(39) Project [codegen id : 11]
Output [8]: [cs_ship_date_sk#1, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_sold_date_sk#8, i_item_desc#14, inv_date_sk#18, w_warehouse_name#20]
Input [11]: [cs_ship_date_sk#1, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8, i_item_desc#14, inv_item_sk#15, inv_quantity_on_hand#17, inv_date_sk#18, w_warehouse_name#20]

(40) Exchange
Input [8]: [cs_ship_date_sk#1, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_sold_date_sk#8, i_item_desc#14, inv_date_sk#18, w_warehouse_name#20]
Arguments: hashpartitioning(cs_sold_date_sk#8, inv_date_sk#18, cs_ship_date_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(41) Sort [codegen id : 12]
Input [8]: [cs_ship_date_sk#1, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_sold_date_sk#8, i_item_desc#14, inv_date_sk#18, w_warehouse_name#20]
Arguments: [cs_sold_date_sk#8 ASC NULLS FIRST, inv_date_sk#18 ASC NULLS FIRST, cs_ship_date_sk#1 ASC NULLS FIRST], false, 0

(42) Scan parquet spark_catalog.default.date_dim
Output [4]: [d_date_sk#21, d_date#22, d_week_seq#23, d_year#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1999), IsNotNull(d_date_sk), IsNotNull(d_week_seq), IsNotNull(d_date)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_week_seq:int,d_year:int>

(43) ColumnarToRow [codegen id : 13]
Input [4]: [d_date_sk#21, d_date#22, d_week_seq#23, d_year#24]

(44) Filter [codegen id : 13]
Input [4]: [d_date_sk#21, d_date#22, d_week_seq#23, d_year#24]
Condition : ((((isnotnull(d_year#24) AND (d_year#24 = 1999)) AND isnotnull(d_date_sk#21)) AND isnotnull(d_week_seq#23)) AND isnotnull(d_date#22))

(45) Project [codegen id : 13]
Output [3]: [d_date_sk#21, d_date#22, d_week_seq#23]
Input [4]: [d_date_sk#21, d_date#22, d_week_seq#23, d_year#24]

(46) BroadcastExchange
Input [3]: [d_date_sk#21, d_date#22, d_week_seq#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [plan_id=8]

(47) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#25, d_week_seq#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(48) ColumnarToRow
Input [2]: [d_date_sk#25, d_week_seq#26]

(49) Filter
Input [2]: [d_date_sk#25, d_week_seq#26]
Condition : (isnotnull(d_week_seq#26) AND isnotnull(d_date_sk#25))

(50) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [d_week_seq#23]
Right keys [1]: [d_week_seq#26]
Join type: Inner
Join condition: None

(51) Project [codegen id : 15]
Output [4]: [d_date_sk#21, d_date#22, d_week_seq#23, d_date_sk#25]
Input [5]: [d_date_sk#21, d_date#22, d_week_seq#23, d_date_sk#25, d_week_seq#26]

(52) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#27, d_date#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(53) ColumnarToRow [codegen id : 14]
Input [2]: [d_date_sk#27, d_date#28]

(54) Filter [codegen id : 14]
Input [2]: [d_date_sk#27, d_date#28]
Condition : (isnotnull(d_date#28) AND isnotnull(d_date_sk#27))

(55) BroadcastExchange
Input [2]: [d_date_sk#27, d_date#28]
Arguments: IdentityBroadcastMode, [plan_id=9]

(56) BroadcastNestedLoopJoin [codegen id : 15]
Join type: Inner
Join condition: (d_date#28 > date_add(d_date#22, 5))

(57) Project [codegen id : 15]
Output [4]: [d_date_sk#21, d_week_seq#23, d_date_sk#25, d_date_sk#27]
Input [6]: [d_date_sk#21, d_date#22, d_week_seq#23, d_date_sk#25, d_date_sk#27, d_date#28]

(58) Exchange
Input [4]: [d_date_sk#21, d_week_seq#23, d_date_sk#25, d_date_sk#27]
Arguments: hashpartitioning(d_date_sk#21, d_date_sk#25, d_date_sk#27, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(59) Sort [codegen id : 16]
Input [4]: [d_date_sk#21, d_week_seq#23, d_date_sk#25, d_date_sk#27]
Arguments: [d_date_sk#21 ASC NULLS FIRST, d_date_sk#25 ASC NULLS FIRST, d_date_sk#27 ASC NULLS FIRST], false, 0

(60) SortMergeJoin [codegen id : 18]
Left keys [3]: [cs_sold_date_sk#8, inv_date_sk#18, cs_ship_date_sk#1]
Right keys [3]: [d_date_sk#21, d_date_sk#25, d_date_sk#27]
Join type: Inner
Join condition: None

(61) Project [codegen id : 18]
Output [6]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, w_warehouse_name#20, i_item_desc#14, d_week_seq#23]
Input [12]: [cs_ship_date_sk#1, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_sold_date_sk#8, i_item_desc#14, inv_date_sk#18, w_warehouse_name#20, d_date_sk#21, d_week_seq#23, d_date_sk#25, d_date_sk#27]

(62) Scan parquet spark_catalog.default.promotion
Output [1]: [p_promo_sk#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int>

(63) ColumnarToRow [codegen id : 17]
Input [1]: [p_promo_sk#29]

(64) Filter [codegen id : 17]
Input [1]: [p_promo_sk#29]
Condition : isnotnull(p_promo_sk#29)

(65) BroadcastExchange
Input [1]: [p_promo_sk#29]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=11]

(66) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [cs_promo_sk#5]
Right keys [1]: [p_promo_sk#29]
Join type: LeftOuter
Join condition: None

(67) Project [codegen id : 18]
Output [5]: [cs_item_sk#4, cs_order_number#6, w_warehouse_name#20, i_item_desc#14, d_week_seq#23]
Input [7]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, w_warehouse_name#20, i_item_desc#14, d_week_seq#23, p_promo_sk#29]

(68) Exchange
Input [5]: [cs_item_sk#4, cs_order_number#6, w_warehouse_name#20, i_item_desc#14, d_week_seq#23]
Arguments: hashpartitioning(cs_item_sk#4, cs_order_number#6, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(69) Sort [codegen id : 19]
Input [5]: [cs_item_sk#4, cs_order_number#6, w_warehouse_name#20, i_item_desc#14, d_week_seq#23]
Arguments: [cs_item_sk#4 ASC NULLS FIRST, cs_order_number#6 ASC NULLS FIRST], false, 0

(70) Scan parquet spark_catalog.default.catalog_returns
Output [3]: [cr_item_sk#30, cr_order_number#31, cr_returned_date_sk#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int>

(71) ColumnarToRow [codegen id : 20]
Input [3]: [cr_item_sk#30, cr_order_number#31, cr_returned_date_sk#32]

(72) Filter [codegen id : 20]
Input [3]: [cr_item_sk#30, cr_order_number#31, cr_returned_date_sk#32]
Condition : (isnotnull(cr_item_sk#30) AND isnotnull(cr_order_number#31))

(73) Project [codegen id : 20]
Output [2]: [cr_item_sk#30, cr_order_number#31]
Input [3]: [cr_item_sk#30, cr_order_number#31, cr_returned_date_sk#32]

(74) Exchange
Input [2]: [cr_item_sk#30, cr_order_number#31]
Arguments: hashpartitioning(cr_item_sk#30, cr_order_number#31, 5), ENSURE_REQUIREMENTS, [plan_id=13]

(75) Sort [codegen id : 21]
Input [2]: [cr_item_sk#30, cr_order_number#31]
Arguments: [cr_item_sk#30 ASC NULLS FIRST, cr_order_number#31 ASC NULLS FIRST], false, 0

(76) SortMergeJoin [codegen id : 22]
Left keys [2]: [cs_item_sk#4, cs_order_number#6]
Right keys [2]: [cr_item_sk#30, cr_order_number#31]
Join type: LeftOuter
Join condition: None

(77) Project [codegen id : 22]
Output [3]: [w_warehouse_name#20, i_item_desc#14, d_week_seq#23]
Input [7]: [cs_item_sk#4, cs_order_number#6, w_warehouse_name#20, i_item_desc#14, d_week_seq#23, cr_item_sk#30, cr_order_number#31]

(78) HashAggregate [codegen id : 22]
Input [3]: [w_warehouse_name#20, i_item_desc#14, d_week_seq#23]
Keys [3]: [i_item_desc#14, w_warehouse_name#20, d_week_seq#23]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#33]
Results [4]: [i_item_desc#14, w_warehouse_name#20, d_week_seq#23, count#34]

(79) Exchange
Input [4]: [i_item_desc#14, w_warehouse_name#20, d_week_seq#23, count#34]
Arguments: hashpartitioning(i_item_desc#14, w_warehouse_name#20, d_week_seq#23, 5), ENSURE_REQUIREMENTS, [plan_id=14]

(80) HashAggregate [codegen id : 23]
Input [4]: [i_item_desc#14, w_warehouse_name#20, d_week_seq#23, count#34]
Keys [3]: [i_item_desc#14, w_warehouse_name#20, d_week_seq#23]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#35]
Results [6]: [i_item_desc#14, w_warehouse_name#20, d_week_seq#23, count(1)#35 AS no_promo#36, count(1)#35 AS promo#37, count(1)#35 AS total_cnt#38]

(81) TakeOrderedAndProject
Input [6]: [i_item_desc#14, w_warehouse_name#20, d_week_seq#23, no_promo#36, promo#37, total_cnt#38]
Arguments: 100, [total_cnt#38 DESC NULLS LAST, i_item_desc#14 ASC NULLS FIRST, w_warehouse_name#20 ASC NULLS FIRST, d_week_seq#23 ASC NULLS FIRST], [i_item_desc#14, w_warehouse_name#20, d_week_seq#23, no_promo#36, promo#37, total_cnt#38]

