== Physical Plan ==
* Filter (52)
+- * HashAggregate (51)
   +- Exchange (50)
      +- * HashAggregate (49)
         +- * HashAggregate (48)
            +- Exchange (47)
               +- * HashAggregate (46)
                  +- * Project (45)
                     +- * SortMergeJoin Inner (44)
                        :- * Sort (31)
                        :  +- Exchange (30)
                        :     +- * Project (29)
                        :        +- * SortMergeJoin Inner (28)
                        :           :- * Sort (21)
                        :           :  +- Exchange (20)
                        :           :     +- * Project (19)
                        :           :        +- * SortMergeJoin Inner (18)
                        :           :           :- * Sort (12)
                        :           :           :  +- Exchange (11)
                        :           :           :     +- * Project (10)
                        :           :           :        +- * BroadcastHashJoin Inner BuildRight (9)
                        :           :           :           :- * Project (4)
                        :           :           :           :  +- * Filter (3)
                        :           :           :           :     +- * ColumnarToRow (2)
                        :           :           :           :        +- Scan parquet spark_catalog.default.store_sales (1)
                        :           :           :           +- BroadcastExchange (8)
                        :           :           :              +- * Filter (7)
                        :           :           :                 +- * ColumnarToRow (6)
                        :           :           :                    +- Scan parquet spark_catalog.default.item (5)
                        :           :           +- * Sort (17)
                        :           :              +- Exchange (16)
                        :           :                 +- * Filter (15)
                        :           :                    +- * ColumnarToRow (14)
                        :           :                       +- Scan parquet spark_catalog.default.customer (13)
                        :           +- * Sort (27)
                        :              +- Exchange (26)
                        :                 +- * Project (25)
                        :                    +- * Filter (24)
                        :                       +- * ColumnarToRow (23)
                        :                          +- Scan parquet spark_catalog.default.store_returns (22)
                        +- * Sort (43)
                           +- Exchange (42)
                              +- * Project (41)
                                 +- * BroadcastHashJoin Inner BuildLeft (40)
                                    :- BroadcastExchange (36)
                                    :  +- * Project (35)
                                    :     +- * Filter (34)
                                    :        +- * ColumnarToRow (33)
                                    :           +- Scan parquet spark_catalog.default.store (32)
                                    +- * Filter (39)
                                       +- * ColumnarToRow (38)
                                          +- Scan parquet spark_catalog.default.customer_address (37)


(1) Scan parquet spark_catalog.default.store_sales
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_paid:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]

(3) Filter [codegen id : 2]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]
Condition : ((((isnotnull(ss_ticket_number#4) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_customer_sk#2)) AND might_contain(Subquery scalar-subquery#7, [id=#8], xxhash64(ss_store_sk#3, 42)))

(4) Project [codegen id : 2]
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]

(5) Scan parquet spark_catalog.default.item
Output [6]: [i_item_sk#9, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_color), EqualTo(i_color,chiffon             ), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(6) ColumnarToRow [codegen id : 1]
Input [6]: [i_item_sk#9, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14]

(7) Filter [codegen id : 1]
Input [6]: [i_item_sk#9, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14]
Condition : ((isnotnull(i_color#12) AND (i_color#12 = chiffon             )) AND isnotnull(i_item_sk#9))

(8) BroadcastExchange
Input [6]: [i_item_sk#9, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#9]
Join type: Inner
Join condition: None

(10) Project [codegen id : 2]
Output [10]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14]
Input [11]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_item_sk#9, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14]

(11) Exchange
Input [10]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14]
Arguments: hashpartitioning(ss_customer_sk#2, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(12) Sort [codegen id : 3]
Input [10]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST], false, 0

(13) Scan parquet spark_catalog.default.customer
Output [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_birth_country)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>

(14) ColumnarToRow [codegen id : 4]
Input [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]

(15) Filter [codegen id : 4]
Input [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]
Condition : (isnotnull(c_customer_sk#15) AND isnotnull(c_birth_country#18))

(16) Exchange
Input [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]
Arguments: hashpartitioning(c_customer_sk#15, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(17) Sort [codegen id : 5]
Input [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]
Arguments: [c_customer_sk#15 ASC NULLS FIRST], false, 0

(18) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#15]
Join type: Inner
Join condition: None

(19) Project [codegen id : 6]
Output [12]: [ss_item_sk#1, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14, c_first_name#16, c_last_name#17, c_birth_country#18]
Input [14]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14, c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]

(20) Exchange
Input [12]: [ss_item_sk#1, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14, c_first_name#16, c_last_name#17, c_birth_country#18]
Arguments: hashpartitioning(ss_ticket_number#4, ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(21) Sort [codegen id : 7]
Input [12]: [ss_item_sk#1, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14, c_first_name#16, c_last_name#17, c_birth_country#18]
Arguments: [ss_ticket_number#4 ASC NULLS FIRST, ss_item_sk#1 ASC NULLS FIRST], false, 0

(22) Scan parquet spark_catalog.default.store_returns
Output [3]: [sr_item_sk#19, sr_ticket_number#20, sr_returned_date_sk#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int>

(23) ColumnarToRow [codegen id : 8]
Input [3]: [sr_item_sk#19, sr_ticket_number#20, sr_returned_date_sk#21]

(24) Filter [codegen id : 8]
Input [3]: [sr_item_sk#19, sr_ticket_number#20, sr_returned_date_sk#21]
Condition : (isnotnull(sr_ticket_number#20) AND isnotnull(sr_item_sk#19))

(25) Project [codegen id : 8]
Output [2]: [sr_item_sk#19, sr_ticket_number#20]
Input [3]: [sr_item_sk#19, sr_ticket_number#20, sr_returned_date_sk#21]

(26) Exchange
Input [2]: [sr_item_sk#19, sr_ticket_number#20]
Arguments: hashpartitioning(sr_ticket_number#20, sr_item_sk#19, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(27) Sort [codegen id : 9]
Input [2]: [sr_item_sk#19, sr_ticket_number#20]
Arguments: [sr_ticket_number#20 ASC NULLS FIRST, sr_item_sk#19 ASC NULLS FIRST], false, 0

(28) SortMergeJoin [codegen id : 10]
Left keys [2]: [ss_ticket_number#4, ss_item_sk#1]
Right keys [2]: [sr_ticket_number#20, sr_item_sk#19]
Join type: Inner
Join condition: None

(29) Project [codegen id : 10]
Output [10]: [ss_store_sk#3, ss_net_paid#5, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14, c_first_name#16, c_last_name#17, c_birth_country#18]
Input [14]: [ss_item_sk#1, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14, c_first_name#16, c_last_name#17, c_birth_country#18, sr_item_sk#19, sr_ticket_number#20]

(30) Exchange
Input [10]: [ss_store_sk#3, ss_net_paid#5, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14, c_first_name#16, c_last_name#17, c_birth_country#18]
Arguments: hashpartitioning(ss_store_sk#3, c_birth_country#18, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(31) Sort [codegen id : 11]
Input [10]: [ss_store_sk#3, ss_net_paid#5, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14, c_first_name#16, c_last_name#17, c_birth_country#18]
Arguments: [ss_store_sk#3 ASC NULLS FIRST, c_birth_country#18 ASC NULLS FIRST], false, 0

(32) Scan parquet spark_catalog.default.store
Output [5]: [s_store_sk#22, s_store_name#23, s_market_id#24, s_state#25, s_zip#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,8), IsNotNull(s_store_sk), IsNotNull(s_zip)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>

(33) ColumnarToRow [codegen id : 12]
Input [5]: [s_store_sk#22, s_store_name#23, s_market_id#24, s_state#25, s_zip#26]

(34) Filter [codegen id : 12]
Input [5]: [s_store_sk#22, s_store_name#23, s_market_id#24, s_state#25, s_zip#26]
Condition : (((isnotnull(s_market_id#24) AND (s_market_id#24 = 8)) AND isnotnull(s_store_sk#22)) AND isnotnull(s_zip#26))

(35) Project [codegen id : 12]
Output [4]: [s_store_sk#22, s_store_name#23, s_state#25, s_zip#26]
Input [5]: [s_store_sk#22, s_store_name#23, s_market_id#24, s_state#25, s_zip#26]

(36) BroadcastExchange
Input [4]: [s_store_sk#22, s_store_name#23, s_state#25, s_zip#26]
Arguments: HashedRelationBroadcastMode(List(input[3, string, true]),false), [plan_id=7]

(37) Scan parquet spark_catalog.default.customer_address
Output [3]: [ca_state#27, ca_zip#28, ca_country#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_country), IsNotNull(ca_zip)]
ReadSchema: struct<ca_state:string,ca_zip:string,ca_country:string>

(38) ColumnarToRow
Input [3]: [ca_state#27, ca_zip#28, ca_country#29]

(39) Filter
Input [3]: [ca_state#27, ca_zip#28, ca_country#29]
Condition : (isnotnull(ca_country#29) AND isnotnull(ca_zip#28))

(40) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [s_zip#26]
Right keys [1]: [ca_zip#28]
Join type: Inner
Join condition: None

(41) Project [codegen id : 13]
Output [5]: [s_store_sk#22, s_store_name#23, s_state#25, ca_state#27, ca_country#29]
Input [7]: [s_store_sk#22, s_store_name#23, s_state#25, s_zip#26, ca_state#27, ca_zip#28, ca_country#29]

(42) Exchange
Input [5]: [s_store_sk#22, s_store_name#23, s_state#25, ca_state#27, ca_country#29]
Arguments: hashpartitioning(s_store_sk#22, upper(ca_country#29), 5), ENSURE_REQUIREMENTS, [plan_id=8]

(43) Sort [codegen id : 14]
Input [5]: [s_store_sk#22, s_store_name#23, s_state#25, ca_state#27, ca_country#29]
Arguments: [s_store_sk#22 ASC NULLS FIRST, upper(ca_country#29) ASC NULLS FIRST], false, 0

(44) SortMergeJoin [codegen id : 15]
Left keys [2]: [ss_store_sk#3, c_birth_country#18]
Right keys [2]: [s_store_sk#22, upper(ca_country#29)]
Join type: Inner
Join condition: None

(45) Project [codegen id : 15]
Output [11]: [ss_net_paid#5, s_store_name#23, s_state#25, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14, c_first_name#16, c_last_name#17, ca_state#27]
Input [15]: [ss_store_sk#3, ss_net_paid#5, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14, c_first_name#16, c_last_name#17, c_birth_country#18, s_store_sk#22, s_store_name#23, s_state#25, ca_state#27, ca_country#29]

(46) HashAggregate [codegen id : 15]
Input [11]: [ss_net_paid#5, s_store_name#23, s_state#25, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14, c_first_name#16, c_last_name#17, ca_state#27]
Keys [10]: [c_last_name#17, c_first_name#16, s_store_name#23, ca_state#27, s_state#25, i_color#12, i_current_price#10, i_manager_id#14, i_units#13, i_size#11]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum#30]
Results [11]: [c_last_name#17, c_first_name#16, s_store_name#23, ca_state#27, s_state#25, i_color#12, i_current_price#10, i_manager_id#14, i_units#13, i_size#11, sum#31]

(47) Exchange
Input [11]: [c_last_name#17, c_first_name#16, s_store_name#23, ca_state#27, s_state#25, i_color#12, i_current_price#10, i_manager_id#14, i_units#13, i_size#11, sum#31]
Arguments: hashpartitioning(c_last_name#17, c_first_name#16, s_store_name#23, ca_state#27, s_state#25, i_color#12, i_current_price#10, i_manager_id#14, i_units#13, i_size#11, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(48) HashAggregate [codegen id : 16]
Input [11]: [c_last_name#17, c_first_name#16, s_store_name#23, ca_state#27, s_state#25, i_color#12, i_current_price#10, i_manager_id#14, i_units#13, i_size#11, sum#31]
Keys [10]: [c_last_name#17, c_first_name#16, s_store_name#23, ca_state#27, s_state#25, i_color#12, i_current_price#10, i_manager_id#14, i_units#13, i_size#11]
Functions [1]: [sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#5))#32]
Results [4]: [c_last_name#17, c_first_name#16, s_store_name#23, MakeDecimal(sum(UnscaledValue(ss_net_paid#5))#32,17,2) AS netpaid#33]

(49) HashAggregate [codegen id : 16]
Input [4]: [c_last_name#17, c_first_name#16, s_store_name#23, netpaid#33]
Keys [3]: [c_last_name#17, c_first_name#16, s_store_name#23]
Functions [1]: [partial_sum(netpaid#33)]
Aggregate Attributes [2]: [sum#34, isEmpty#35]
Results [5]: [c_last_name#17, c_first_name#16, s_store_name#23, sum#36, isEmpty#37]

(50) Exchange
Input [5]: [c_last_name#17, c_first_name#16, s_store_name#23, sum#36, isEmpty#37]
Arguments: hashpartitioning(c_last_name#17, c_first_name#16, s_store_name#23, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(51) HashAggregate [codegen id : 17]
Input [5]: [c_last_name#17, c_first_name#16, s_store_name#23, sum#36, isEmpty#37]
Keys [3]: [c_last_name#17, c_first_name#16, s_store_name#23]
Functions [1]: [sum(netpaid#33)]
Aggregate Attributes [1]: [sum(netpaid#33)#38]
Results [4]: [c_last_name#17, c_first_name#16, s_store_name#23, sum(netpaid#33)#38 AS paid#39]

(52) Filter [codegen id : 17]
Input [4]: [c_last_name#17, c_first_name#16, s_store_name#23, paid#39]
Condition : (isnotnull(paid#39) AND (cast(paid#39 as decimal(33,8)) > cast(Subquery scalar-subquery#40, [id=#41] as decimal(33,8))))

===== Subqueries =====

Subquery:1 Hosting operator id = 52 Hosting Expression = Subquery scalar-subquery#40, [id=#41]
* HashAggregate (89)
+- Exchange (88)
   +- * HashAggregate (87)
      +- * HashAggregate (86)
         +- Exchange (85)
            +- * HashAggregate (84)
               +- * Project (83)
                  +- * SortMergeJoin Inner (82)
                     :- * Sort (79)
                     :  +- Exchange (78)
                     :     +- * Project (77)
                     :        +- * SortMergeJoin Inner (76)
                     :           :- * Sort (73)
                     :           :  +- Exchange (72)
                     :           :     +- * Project (71)
                     :           :        +- * SortMergeJoin Inner (70)
                     :           :           :- * Sort (64)
                     :           :           :  +- Exchange (63)
                     :           :           :     +- * Project (62)
                     :           :           :        +- * SortMergeJoin Inner (61)
                     :           :           :           :- * Sort (58)
                     :           :           :           :  +- Exchange (57)
                     :           :           :           :     +- * Project (56)
                     :           :           :           :        +- * Filter (55)
                     :           :           :           :           +- * ColumnarToRow (54)
                     :           :           :           :              +- Scan parquet spark_catalog.default.store_sales (53)
                     :           :           :           +- * Sort (60)
                     :           :           :              +- ReusedExchange (59)
                     :           :           +- * Sort (69)
                     :           :              +- Exchange (68)
                     :           :                 +- * Filter (67)
                     :           :                    +- * ColumnarToRow (66)
                     :           :                       +- Scan parquet spark_catalog.default.item (65)
                     :           +- * Sort (75)
                     :              +- ReusedExchange (74)
                     +- * Sort (81)
                        +- ReusedExchange (80)


(53) Scan parquet spark_catalog.default.store_sales
Output [6]: [ss_item_sk#42, ss_customer_sk#43, ss_store_sk#44, ss_ticket_number#45, ss_net_paid#46, ss_sold_date_sk#47]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_paid:decimal(7,2)>

(54) ColumnarToRow [codegen id : 1]
Input [6]: [ss_item_sk#42, ss_customer_sk#43, ss_store_sk#44, ss_ticket_number#45, ss_net_paid#46, ss_sold_date_sk#47]

(55) Filter [codegen id : 1]
Input [6]: [ss_item_sk#42, ss_customer_sk#43, ss_store_sk#44, ss_ticket_number#45, ss_net_paid#46, ss_sold_date_sk#47]
Condition : ((((isnotnull(ss_ticket_number#45) AND isnotnull(ss_item_sk#42)) AND isnotnull(ss_store_sk#44)) AND isnotnull(ss_customer_sk#43)) AND might_contain(ReusedSubquery Subquery scalar-subquery#7, [id=#8], xxhash64(ss_store_sk#44, 42)))

(56) Project [codegen id : 1]
Output [5]: [ss_item_sk#42, ss_customer_sk#43, ss_store_sk#44, ss_ticket_number#45, ss_net_paid#46]
Input [6]: [ss_item_sk#42, ss_customer_sk#43, ss_store_sk#44, ss_ticket_number#45, ss_net_paid#46, ss_sold_date_sk#47]

(57) Exchange
Input [5]: [ss_item_sk#42, ss_customer_sk#43, ss_store_sk#44, ss_ticket_number#45, ss_net_paid#46]
Arguments: hashpartitioning(ss_customer_sk#43, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(58) Sort [codegen id : 2]
Input [5]: [ss_item_sk#42, ss_customer_sk#43, ss_store_sk#44, ss_ticket_number#45, ss_net_paid#46]
Arguments: [ss_customer_sk#43 ASC NULLS FIRST], false, 0

(59) ReusedExchange [Reuses operator id: 16]
Output [4]: [c_customer_sk#48, c_first_name#49, c_last_name#50, c_birth_country#51]

(60) Sort [codegen id : 4]
Input [4]: [c_customer_sk#48, c_first_name#49, c_last_name#50, c_birth_country#51]
Arguments: [c_customer_sk#48 ASC NULLS FIRST], false, 0

(61) SortMergeJoin [codegen id : 5]
Left keys [1]: [ss_customer_sk#43]
Right keys [1]: [c_customer_sk#48]
Join type: Inner
Join condition: None

(62) Project [codegen id : 5]
Output [7]: [ss_item_sk#42, ss_store_sk#44, ss_ticket_number#45, ss_net_paid#46, c_first_name#49, c_last_name#50, c_birth_country#51]
Input [9]: [ss_item_sk#42, ss_customer_sk#43, ss_store_sk#44, ss_ticket_number#45, ss_net_paid#46, c_customer_sk#48, c_first_name#49, c_last_name#50, c_birth_country#51]

(63) Exchange
Input [7]: [ss_item_sk#42, ss_store_sk#44, ss_ticket_number#45, ss_net_paid#46, c_first_name#49, c_last_name#50, c_birth_country#51]
Arguments: hashpartitioning(ss_item_sk#42, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(64) Sort [codegen id : 6]
Input [7]: [ss_item_sk#42, ss_store_sk#44, ss_ticket_number#45, ss_net_paid#46, c_first_name#49, c_last_name#50, c_birth_country#51]
Arguments: [ss_item_sk#42 ASC NULLS FIRST], false, 0

(65) Scan parquet spark_catalog.default.item
Output [6]: [i_item_sk#52, i_current_price#53, i_size#54, i_color#55, i_units#56, i_manager_id#57]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(66) ColumnarToRow [codegen id : 7]
Input [6]: [i_item_sk#52, i_current_price#53, i_size#54, i_color#55, i_units#56, i_manager_id#57]

(67) Filter [codegen id : 7]
Input [6]: [i_item_sk#52, i_current_price#53, i_size#54, i_color#55, i_units#56, i_manager_id#57]
Condition : isnotnull(i_item_sk#52)

(68) Exchange
Input [6]: [i_item_sk#52, i_current_price#53, i_size#54, i_color#55, i_units#56, i_manager_id#57]
Arguments: hashpartitioning(i_item_sk#52, 5), ENSURE_REQUIREMENTS, [plan_id=13]

(69) Sort [codegen id : 8]
Input [6]: [i_item_sk#52, i_current_price#53, i_size#54, i_color#55, i_units#56, i_manager_id#57]
Arguments: [i_item_sk#52 ASC NULLS FIRST], false, 0

(70) SortMergeJoin [codegen id : 9]
Left keys [1]: [ss_item_sk#42]
Right keys [1]: [i_item_sk#52]
Join type: Inner
Join condition: None

(71) Project [codegen id : 9]
Output [12]: [ss_item_sk#42, ss_store_sk#44, ss_ticket_number#45, ss_net_paid#46, c_first_name#49, c_last_name#50, c_birth_country#51, i_current_price#53, i_size#54, i_color#55, i_units#56, i_manager_id#57]
Input [13]: [ss_item_sk#42, ss_store_sk#44, ss_ticket_number#45, ss_net_paid#46, c_first_name#49, c_last_name#50, c_birth_country#51, i_item_sk#52, i_current_price#53, i_size#54, i_color#55, i_units#56, i_manager_id#57]

(72) Exchange
Input [12]: [ss_item_sk#42, ss_store_sk#44, ss_ticket_number#45, ss_net_paid#46, c_first_name#49, c_last_name#50, c_birth_country#51, i_current_price#53, i_size#54, i_color#55, i_units#56, i_manager_id#57]
Arguments: hashpartitioning(ss_ticket_number#45, ss_item_sk#42, 5), ENSURE_REQUIREMENTS, [plan_id=14]

(73) Sort [codegen id : 10]
Input [12]: [ss_item_sk#42, ss_store_sk#44, ss_ticket_number#45, ss_net_paid#46, c_first_name#49, c_last_name#50, c_birth_country#51, i_current_price#53, i_size#54, i_color#55, i_units#56, i_manager_id#57]
Arguments: [ss_ticket_number#45 ASC NULLS FIRST, ss_item_sk#42 ASC NULLS FIRST], false, 0

(74) ReusedExchange [Reuses operator id: 26]
Output [2]: [sr_item_sk#58, sr_ticket_number#59]

(75) Sort [codegen id : 12]
Input [2]: [sr_item_sk#58, sr_ticket_number#59]
Arguments: [sr_ticket_number#59 ASC NULLS FIRST, sr_item_sk#58 ASC NULLS FIRST], false, 0

(76) SortMergeJoin [codegen id : 13]
Left keys [2]: [ss_ticket_number#45, ss_item_sk#42]
Right keys [2]: [sr_ticket_number#59, sr_item_sk#58]
Join type: Inner
Join condition: None

(77) Project [codegen id : 13]
Output [10]: [ss_store_sk#44, ss_net_paid#46, c_first_name#49, c_last_name#50, c_birth_country#51, i_current_price#53, i_size#54, i_color#55, i_units#56, i_manager_id#57]
Input [14]: [ss_item_sk#42, ss_store_sk#44, ss_ticket_number#45, ss_net_paid#46, c_first_name#49, c_last_name#50, c_birth_country#51, i_current_price#53, i_size#54, i_color#55, i_units#56, i_manager_id#57, sr_item_sk#58, sr_ticket_number#59]

(78) Exchange
Input [10]: [ss_store_sk#44, ss_net_paid#46, c_first_name#49, c_last_name#50, c_birth_country#51, i_current_price#53, i_size#54, i_color#55, i_units#56, i_manager_id#57]
Arguments: hashpartitioning(ss_store_sk#44, c_birth_country#51, 5), ENSURE_REQUIREMENTS, [plan_id=15]

(79) Sort [codegen id : 14]
Input [10]: [ss_store_sk#44, ss_net_paid#46, c_first_name#49, c_last_name#50, c_birth_country#51, i_current_price#53, i_size#54, i_color#55, i_units#56, i_manager_id#57]
Arguments: [ss_store_sk#44 ASC NULLS FIRST, c_birth_country#51 ASC NULLS FIRST], false, 0

(80) ReusedExchange [Reuses operator id: 42]
Output [5]: [s_store_sk#60, s_store_name#61, s_state#62, ca_state#63, ca_country#64]

(81) Sort [codegen id : 17]
Input [5]: [s_store_sk#60, s_store_name#61, s_state#62, ca_state#63, ca_country#64]
Arguments: [s_store_sk#60 ASC NULLS FIRST, upper(ca_country#64) ASC NULLS FIRST], false, 0

(82) SortMergeJoin [codegen id : 18]
Left keys [2]: [ss_store_sk#44, c_birth_country#51]
Right keys [2]: [s_store_sk#60, upper(ca_country#64)]
Join type: Inner
Join condition: None

(83) Project [codegen id : 18]
Output [11]: [ss_net_paid#46, s_store_name#61, s_state#62, i_current_price#53, i_size#54, i_color#55, i_units#56, i_manager_id#57, c_first_name#49, c_last_name#50, ca_state#63]
Input [15]: [ss_store_sk#44, ss_net_paid#46, c_first_name#49, c_last_name#50, c_birth_country#51, i_current_price#53, i_size#54, i_color#55, i_units#56, i_manager_id#57, s_store_sk#60, s_store_name#61, s_state#62, ca_state#63, ca_country#64]

(84) HashAggregate [codegen id : 18]
Input [11]: [ss_net_paid#46, s_store_name#61, s_state#62, i_current_price#53, i_size#54, i_color#55, i_units#56, i_manager_id#57, c_first_name#49, c_last_name#50, ca_state#63]
Keys [10]: [c_last_name#50, c_first_name#49, s_store_name#61, ca_state#63, s_state#62, i_color#55, i_current_price#53, i_manager_id#57, i_units#56, i_size#54]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#46))]
Aggregate Attributes [1]: [sum#65]
Results [11]: [c_last_name#50, c_first_name#49, s_store_name#61, ca_state#63, s_state#62, i_color#55, i_current_price#53, i_manager_id#57, i_units#56, i_size#54, sum#66]

(85) Exchange
Input [11]: [c_last_name#50, c_first_name#49, s_store_name#61, ca_state#63, s_state#62, i_color#55, i_current_price#53, i_manager_id#57, i_units#56, i_size#54, sum#66]
Arguments: hashpartitioning(c_last_name#50, c_first_name#49, s_store_name#61, ca_state#63, s_state#62, i_color#55, i_current_price#53, i_manager_id#57, i_units#56, i_size#54, 5), ENSURE_REQUIREMENTS, [plan_id=16]

(86) HashAggregate [codegen id : 19]
Input [11]: [c_last_name#50, c_first_name#49, s_store_name#61, ca_state#63, s_state#62, i_color#55, i_current_price#53, i_manager_id#57, i_units#56, i_size#54, sum#66]
Keys [10]: [c_last_name#50, c_first_name#49, s_store_name#61, ca_state#63, s_state#62, i_color#55, i_current_price#53, i_manager_id#57, i_units#56, i_size#54]
Functions [1]: [sum(UnscaledValue(ss_net_paid#46))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#46))#32]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_net_paid#46))#32,17,2) AS netpaid#67]

(87) HashAggregate [codegen id : 19]
Input [1]: [netpaid#67]
Keys: []
Functions [1]: [partial_avg(netpaid#67)]
Aggregate Attributes [2]: [sum#68, count#69]
Results [2]: [sum#70, count#71]

(88) Exchange
Input [2]: [sum#70, count#71]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=17]

(89) HashAggregate [codegen id : 20]
Input [2]: [sum#70, count#71]
Keys: []
Functions [1]: [avg(netpaid#67)]
Aggregate Attributes [1]: [avg(netpaid#67)#72]
Results [1]: [(0.05 * avg(netpaid#67)#72) AS (0.05 * avg(netpaid))#73]

Subquery:2 Hosting operator id = 55 Hosting Expression = ReusedSubquery Subquery scalar-subquery#7, [id=#8]

Subquery:3 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#7, [id=#8]
ObjectHashAggregate (96)
+- Exchange (95)
   +- ObjectHashAggregate (94)
      +- * Project (93)
         +- * Filter (92)
            +- * ColumnarToRow (91)
               +- Scan parquet spark_catalog.default.store (90)


(90) Scan parquet spark_catalog.default.store
Output [3]: [s_store_sk#22, s_market_id#24, s_zip#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,8), IsNotNull(s_store_sk), IsNotNull(s_zip)]
ReadSchema: struct<s_store_sk:int,s_market_id:int,s_zip:string>

(91) ColumnarToRow [codegen id : 1]
Input [3]: [s_store_sk#22, s_market_id#24, s_zip#26]

(92) Filter [codegen id : 1]
Input [3]: [s_store_sk#22, s_market_id#24, s_zip#26]
Condition : (((isnotnull(s_market_id#24) AND (s_market_id#24 = 8)) AND isnotnull(s_store_sk#22)) AND isnotnull(s_zip#26))

(93) Project [codegen id : 1]
Output [1]: [s_store_sk#22]
Input [3]: [s_store_sk#22, s_market_id#24, s_zip#26]

(94) ObjectHashAggregate
Input [1]: [s_store_sk#22]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(s_store_sk#22, 42), 40, 1250, 0, 0)]
Aggregate Attributes [1]: [buf#74]
Results [1]: [buf#75]

(95) Exchange
Input [1]: [buf#75]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=18]

(96) ObjectHashAggregate
Input [1]: [buf#75]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(s_store_sk#22, 42), 40, 1250, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(s_store_sk#22, 42), 40, 1250, 0, 0)#76]
Results [1]: [bloom_filter_agg(xxhash64(s_store_sk#22, 42), 40, 1250, 0, 0)#76 AS bloomFilter#77]


