== Physical Plan ==
TakeOrderedAndProject (42)
+- * Project (41)
   +- * BroadcastHashJoin Inner BuildRight (40)
      :- * Project (35)
      :  +- * SortMergeJoin Inner (34)
      :     :- * Sort (28)
      :     :  +- Exchange (27)
      :     :     +- * Project (26)
      :     :        +- * BroadcastHashJoin Inner BuildRight (25)
      :     :           :- * Filter (10)
      :     :           :  +- * HashAggregate (9)
      :     :           :     +- Exchange (8)
      :     :           :        +- * HashAggregate (7)
      :     :           :           +- * Project (6)
      :     :           :              +- * BroadcastHashJoin Inner BuildRight (5)
      :     :           :                 :- * Filter (3)
      :     :           :                 :  +- * ColumnarToRow (2)
      :     :           :                 :     +- Scan parquet spark_catalog.default.store_sales (1)
      :     :           :                 +- ReusedExchange (4)
      :     :           +- BroadcastExchange (24)
      :     :              +- * Filter (23)
      :     :                 +- * HashAggregate (22)
      :     :                    +- Exchange (21)
      :     :                       +- * HashAggregate (20)
      :     :                          +- * HashAggregate (19)
      :     :                             +- Exchange (18)
      :     :                                +- * HashAggregate (17)
      :     :                                   +- * Project (16)
      :     :                                      +- * BroadcastHashJoin Inner BuildRight (15)
      :     :                                         :- * Filter (13)
      :     :                                         :  +- * ColumnarToRow (12)
      :     :                                         :     +- Scan parquet spark_catalog.default.store_sales (11)
      :     :                                         +- ReusedExchange (14)
      :     +- * Sort (33)
      :        +- Exchange (32)
      :           +- * Filter (31)
      :              +- * ColumnarToRow (30)
      :                 +- Scan parquet spark_catalog.default.item (29)
      +- BroadcastExchange (39)
         +- * Filter (38)
            +- * ColumnarToRow (37)
               +- Scan parquet spark_catalog.default.store (36)


(1) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), (ss_sold_date_sk#4 >= 2451911), (ss_sold_date_sk#4 <= 2452275), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3, ss_sold_date_sk#4]
Condition : (isnotnull(ss_store_sk#2) AND isnotnull(ss_item_sk#1))

(4) ReusedExchange [Reuses operator id: 47]
Output [1]: [d_date_sk#6]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join type: Inner
Join condition: None

(6) Project [codegen id : 2]
Output [3]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3]
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3, ss_sold_date_sk#4, d_date_sk#6]

(7) HashAggregate [codegen id : 2]
Input [3]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3]
Keys [2]: [ss_store_sk#2, ss_item_sk#1]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#3))]
Aggregate Attributes [1]: [sum#7]
Results [3]: [ss_store_sk#2, ss_item_sk#1, sum#8]

(8) Exchange
Input [3]: [ss_store_sk#2, ss_item_sk#1, sum#8]
Arguments: hashpartitioning(ss_store_sk#2, ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(9) HashAggregate [codegen id : 7]
Input [3]: [ss_store_sk#2, ss_item_sk#1, sum#8]
Keys [2]: [ss_store_sk#2, ss_item_sk#1]
Functions [1]: [sum(UnscaledValue(ss_sales_price#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#3))#9]
Results [3]: [ss_store_sk#2, ss_item_sk#1, MakeDecimal(sum(UnscaledValue(ss_sales_price#3))#9,17,2) AS revenue#10]

(10) Filter [codegen id : 7]
Input [3]: [ss_store_sk#2, ss_item_sk#1, revenue#10]
Condition : isnotnull(revenue#10)

(11) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#11, ss_store_sk#12, ss_sales_price#13, ss_sold_date_sk#14]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#14), (ss_sold_date_sk#14 >= 2451911), (ss_sold_date_sk#14 <= 2452275), dynamicpruningexpression(ss_sold_date_sk#14 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(12) ColumnarToRow [codegen id : 4]
Input [4]: [ss_item_sk#11, ss_store_sk#12, ss_sales_price#13, ss_sold_date_sk#14]

(13) Filter [codegen id : 4]
Input [4]: [ss_item_sk#11, ss_store_sk#12, ss_sales_price#13, ss_sold_date_sk#14]
Condition : isnotnull(ss_store_sk#12)

(14) ReusedExchange [Reuses operator id: 47]
Output [1]: [d_date_sk#15]

(15) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#14]
Right keys [1]: [d_date_sk#15]
Join type: Inner
Join condition: None

(16) Project [codegen id : 4]
Output [3]: [ss_item_sk#11, ss_store_sk#12, ss_sales_price#13]
Input [5]: [ss_item_sk#11, ss_store_sk#12, ss_sales_price#13, ss_sold_date_sk#14, d_date_sk#15]

(17) HashAggregate [codegen id : 4]
Input [3]: [ss_item_sk#11, ss_store_sk#12, ss_sales_price#13]
Keys [2]: [ss_store_sk#12, ss_item_sk#11]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#13))]
Aggregate Attributes [1]: [sum#16]
Results [3]: [ss_store_sk#12, ss_item_sk#11, sum#17]

(18) Exchange
Input [3]: [ss_store_sk#12, ss_item_sk#11, sum#17]
Arguments: hashpartitioning(ss_store_sk#12, ss_item_sk#11, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(19) HashAggregate [codegen id : 5]
Input [3]: [ss_store_sk#12, ss_item_sk#11, sum#17]
Keys [2]: [ss_store_sk#12, ss_item_sk#11]
Functions [1]: [sum(UnscaledValue(ss_sales_price#13))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#13))#18]
Results [2]: [ss_store_sk#12, MakeDecimal(sum(UnscaledValue(ss_sales_price#13))#18,17,2) AS revenue#19]

(20) HashAggregate [codegen id : 5]
Input [2]: [ss_store_sk#12, revenue#19]
Keys [1]: [ss_store_sk#12]
Functions [1]: [partial_avg(revenue#19)]
Aggregate Attributes [2]: [sum#20, count#21]
Results [3]: [ss_store_sk#12, sum#22, count#23]

(21) Exchange
Input [3]: [ss_store_sk#12, sum#22, count#23]
Arguments: hashpartitioning(ss_store_sk#12, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(22) HashAggregate [codegen id : 6]
Input [3]: [ss_store_sk#12, sum#22, count#23]
Keys [1]: [ss_store_sk#12]
Functions [1]: [avg(revenue#19)]
Aggregate Attributes [1]: [avg(revenue#19)#24]
Results [2]: [ss_store_sk#12, avg(revenue#19)#24 AS ave#25]

(23) Filter [codegen id : 6]
Input [2]: [ss_store_sk#12, ave#25]
Condition : isnotnull(ave#25)

(24) BroadcastExchange
Input [2]: [ss_store_sk#12, ave#25]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

(25) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [ss_store_sk#12]
Join type: Inner
Join condition: (cast(revenue#10 as decimal(23,7)) <= (0.1 * ave#25))

(26) Project [codegen id : 7]
Output [3]: [ss_store_sk#2, ss_item_sk#1, revenue#10]
Input [5]: [ss_store_sk#2, ss_item_sk#1, revenue#10, ss_store_sk#12, ave#25]

(27) Exchange
Input [3]: [ss_store_sk#2, ss_item_sk#1, revenue#10]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(28) Sort [codegen id : 8]
Input [3]: [ss_store_sk#2, ss_item_sk#1, revenue#10]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(29) Scan parquet spark_catalog.default.item
Output [5]: [i_item_sk#26, i_item_desc#27, i_current_price#28, i_wholesale_cost#29, i_brand#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string,i_current_price:decimal(7,2),i_wholesale_cost:decimal(7,2),i_brand:string>

(30) ColumnarToRow [codegen id : 9]
Input [5]: [i_item_sk#26, i_item_desc#27, i_current_price#28, i_wholesale_cost#29, i_brand#30]

(31) Filter [codegen id : 9]
Input [5]: [i_item_sk#26, i_item_desc#27, i_current_price#28, i_wholesale_cost#29, i_brand#30]
Condition : isnotnull(i_item_sk#26)

(32) Exchange
Input [5]: [i_item_sk#26, i_item_desc#27, i_current_price#28, i_wholesale_cost#29, i_brand#30]
Arguments: hashpartitioning(i_item_sk#26, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(33) Sort [codegen id : 10]
Input [5]: [i_item_sk#26, i_item_desc#27, i_current_price#28, i_wholesale_cost#29, i_brand#30]
Arguments: [i_item_sk#26 ASC NULLS FIRST], false, 0

(34) SortMergeJoin [codegen id : 12]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#26]
Join type: Inner
Join condition: None

(35) Project [codegen id : 12]
Output [6]: [ss_store_sk#2, revenue#10, i_item_desc#27, i_current_price#28, i_wholesale_cost#29, i_brand#30]
Input [8]: [ss_store_sk#2, ss_item_sk#1, revenue#10, i_item_sk#26, i_item_desc#27, i_current_price#28, i_wholesale_cost#29, i_brand#30]

(36) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#31, s_store_name#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_name:string>

(37) ColumnarToRow [codegen id : 11]
Input [2]: [s_store_sk#31, s_store_name#32]

(38) Filter [codegen id : 11]
Input [2]: [s_store_sk#31, s_store_name#32]
Condition : isnotnull(s_store_sk#31)

(39) BroadcastExchange
Input [2]: [s_store_sk#31, s_store_name#32]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=7]

(40) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#31]
Join type: Inner
Join condition: None

(41) Project [codegen id : 12]
Output [6]: [s_store_name#32, i_item_desc#27, revenue#10, i_current_price#28, i_wholesale_cost#29, i_brand#30]
Input [8]: [ss_store_sk#2, revenue#10, i_item_desc#27, i_current_price#28, i_wholesale_cost#29, i_brand#30, s_store_sk#31, s_store_name#32]

(42) TakeOrderedAndProject
Input [6]: [s_store_name#32, i_item_desc#27, revenue#10, i_current_price#28, i_wholesale_cost#29, i_brand#30]
Arguments: 100, [s_store_name#32 ASC NULLS FIRST, i_item_desc#27 ASC NULLS FIRST], [s_store_name#32, i_item_desc#27, revenue#10, i_current_price#28, i_wholesale_cost#29, i_brand#30]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (47)
+- * Project (46)
   +- * Filter (45)
      +- * ColumnarToRow (44)
         +- Scan parquet spark_catalog.default.date_dim (43)


(43) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#6, d_month_seq#33]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), GreaterThanOrEqual(d_date_sk,2451911), LessThanOrEqual(d_date_sk,2452275), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(44) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#6, d_month_seq#33]

(45) Filter [codegen id : 1]
Input [2]: [d_date_sk#6, d_month_seq#33]
Condition : (((((isnotnull(d_month_seq#33) AND (d_month_seq#33 >= 1212)) AND (d_month_seq#33 <= 1223)) AND (d_date_sk#6 >= 2451911)) AND (d_date_sk#6 <= 2452275)) AND isnotnull(d_date_sk#6))

(46) Project [codegen id : 1]
Output [1]: [d_date_sk#6]
Input [2]: [d_date_sk#6, d_month_seq#33]

(47) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]

Subquery:2 Hosting operator id = 11 Hosting Expression = ss_sold_date_sk#14 IN dynamicpruning#5


